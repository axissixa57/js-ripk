let text = `Введение
Linux (произносится — «линукс») является клоном операционной системы UNIX, который работает на большом количестве платформ, в первую очередь — на персональных компьютерах с процессорами Intel 80386 и выше. В системе Linux работает большое количество приложений, включая TeX, X Window System, компилятор GNU C/C++, стек протоколов TCP/IP и многое другое. Linux — добросовестная и легко модифицируемая реализация идей системы UNIX.
Linux превращает любой компьютер с процессором 80386 и выше в рабочую станцию, которая даёт вам в руки всю мощь системы UNIX. Корпорации устанавливают Linux на все машины сети и используют эту операционную систему для ведения финансовой (или, например, больничной) документации, распределённых вычислений и управления телекоммуникациями. Во всем мире система Linux используется в университетах для обучения студентов проектированию операционных систем и системному программированию. Многочисленные энтузиасты, которые есть повсюду, используют Linux дома для программирования, повышения эффективности работы, или же для иных компьютерных изысканий.
Особенность системы Linux в том, что это — свободно распространяемая реализация системы UNIX. С начала и по сию пору Linux создаётся коллективом энтузиастов, которые общаются в основном через Интернет, обмениваясь текстами программ, сообщениями о найденных ошибках, решая все проблемы в открытом общении. В этом сообществе рады каждому, кто хочет участвовать в разработке системы Linux. Все, что для этого нужно — это, во-первых, желание совершенствовать этот клон UNIX, и во-вторых — некоторый навык в программировании.
Краткая история системы Linux
Система UNIX стала одной из наиболее популярных операционных систем во всем мире благодаря тому, что она поддерживает большое количество платформ и, кроме того, активно распространяется. Начало её созданию было положено в компании AT&T в 70-е годы, где она разрабатывалась как многозадачная операционная система для миникомпьютеров и так называемых «больших машин» тех лет. С тех пор, несмотря на несколько запутанный интерфейс и отсутствие единой стандартизации, система UNIX выросла в одну из наиболее распространённых операционных систем во всем мире.
Многие фанатики компьютерных изысканий (hackers) полагают, что «UNIX — это Вещь» и что это «действительно Настоящая Операционная Система», с большой буквы. Этим и объясняется развитие и распространение системы Linux силами все более расширяющейся группы UNIX-хакеров, которые хотят приобщиться к созданию той системы, на которой сами работают.
Модификации системы UNIX существуют для многих типов компьютеров, от персональных и до суперкомпьютеров типа Cray Y-MP. Большинство версий системы UNIX для персональных компьютеров весьма дороги и громоздки. На момент написания исходной версии этой книги (февраль 1998 г.) версия UNIX System V для компьютера с процессором 386 стоила около 1500 долларов США.
Linux является бесплатной версией системы UNIX, изначально разработанной Линусом Торвальдсом (Linus Torvalds) в университете в Хельсинки. Через Интернет ему помогали многочисленные программисты и знатоки системы UNIX. В принципе, любой сообразительный человек с навыками программирования имеет шанс модифицировать или изменить данную систему. Ядро системы Linux не использует никаких программных разработок, созданных компанией AT&T или кем-либо ещё, кто может предъявить свои права на интеллектуальную собственность. Значительная часть приложений для системы Linux разработана в рамках проекта GNU, осуществляемого в компании Free Software Foundation, Cambridge, Massachusetts, U.S.A. Тем не менее, программисты всего света вносили свой вклад в постоянно растущий фонд Linux-приложений.
В начале Linux разрабатывался Линусом Торвальдсом как хобби. Линус Торвальдс был вдохновлён системой Minix, другим клоном системы UNIX, разработанным Энди Таненбаумом (Andy Tanenbaum). Первые обсуждения системы Linux проводились в телеконференции Usenet, которая называлась comp.os.minix. Предметом обсуждения была в основном идея создания на основе системы UNIX небольшой учебной операционной системы для тех пользователей системы Minix, которые хотели от неё большего.
На начальном этапе разработки системы Linux в основном создавались средства переключения задач для защищённого режима (protected-mode) процессора 80386. Этот этап работы целиком выполнялся на Ассемблере. О том времени Линус Торвальдс пишет так:
...А дальше вела прямая дорога: хоть это было тяжёлое и скрупулёзнейшее программирование, но у меня уже был доступ к некоторым устройствам, и отладка стала проще. На этой стадии я стал использовать язык C, что определённо ускорило процесс. Именно тогда я стал серьёзно подумывать об этой своей идее создать «создать Minix, который будет лучше, чем Minix». От этой идеи веяло гигантоманией, однако я надеялся, что в один прекрасный день я смогу перекомпилировать gcc в системе Linux...
Два месяца потрачены на основную конфигурацию, и затем весьма скоро у меня уже был драйвер жёсткого диска (он иногда давал серьёзные сбои, но на моем компьютере он счастливым образом мог работать). Примерно в это же время (конец августа 1991 года) я открыл доступ к версии 0.01: она не была сколько-нибудь совершенной, в ней не было драйвера гибких дисков, и у неё было совсем немного возможностей. Я не думаю, что кто-либо хоть раз откомпилировал эту версию. Но к тому времени я уже серьёзно погряз в эту историю, и я не намерен был останавливаться до тех пор, пока я не покорю Minix.
Никакого сообщения о выходе версии 0.01 системы Linux не было сделано. Исходные тексты версии 0.01 даже не могли быть собраны в единую работающую систему. В них содержались лишь изолированные обрывки исходных текстов ядра системы; предполагалось, что у пользователя есть доступ к системе Minix, в которой эти тексты можно было компилировать, чтобы затем иметь возможность экспериментировать с системой Linux.
5 октября 1991 года Линус Торвальдс объявил о создании первой «официальной» версии системы Linux (эта система носила номер 0.02). К тому времени автор мог запускать на ней bash (GNU Bourne Again Shell) и gcc (GNU C compiler), однако почти ничего помимо этого. Это все ещё была система для хакеров. Усилия всегда направлялись в первую очередь на создание ядра системы, а поддержке пользователей, документированию и распространению системы внимание почти не уделялось. И по сей день[2], похоже, сообщество разработчиков системы Linux считает эти вопросы вторичными, уступающими по важности «истинному программированию» (т. е. развитию ядра системы).
Линус Торвальдс в телеконференции comp.os.minix писал об этом так.
Не тоскуете ли вы о славном времени системы Minix-1.1, времени славных людей, самостоятельно писавших себе драйверы устройств? Не нужен ли вам проект, достойный вас? Нет ли у вас смертельного желания поломать себе зубы о задачу создания операционной системы, которую вы могли бы видоизменять под свои потребности? Не разочаровывает ли вас то, что все в системе Minix нормально работает? Если да, то это сообщение  — для вас.
Как я уже сообщал месяц назад, я работаю над свободной версией  — копией системы Minix  — для компьютеров AT-386. Работа наконец достигла той стадии, когда систему уже можно использовать (либо нельзя  — в зависимости от того, чего вы хотите). Я хотел бы открыть доступ к исходным текстам для широкого распространения. Это всего лишь версия 0.02 ... но я уже успешно запускал в ней bash, gcc, gnu-make, gnu-sed, compress и т. д.
Благодаря тому, что над системой теперь работал уже не один человек, следующей после версии 0.03 Линус Торвальдс смог присвоить сразу номер 0.10. После нескольких последующих доработок этот номер был увеличен в марте 1992 года до 0.95, что указывало на близость (по мнению авторов) выхода в свет «официальной» версии системы (вообще говоря, номер 1.0 не присваивается до тех пор, пока система либо программа не написана полностью и не избавлена от всех ошибок, хотя бы теоретически). Почти полтора года спустя (в конце декабря 1993 года) версия ядра системы Linux все ещё носила номер 0.99.pl14 (pl обозначает patchlevel  — здесь: порядковый номер исправлений, правки), «асимптотически» приближаясь к 1.0. На момент написания исходной версии этой книги (февраль 1998 г.)[3] имеется стабильная версия 2.0.pl33 системы Linux, а ядра, имеющие номер версии 2.1, являются экспериментальными.
Большинство основных некоммерческих программ, разработанных для системы UNIX, адаптированы под Linux. Имеются и коммерческие программные продукты. В настоящее время поддерживается больше аппаратных средств, чем это было в исходной версии ядра системы Linux. Так, неожиданно для всех, «маленький» клон семейства UNIX вырос и завоевал весь мир персональных компьютеров.
Характеристики и возможности системы
Linux поддерживает те возможности, которые имеются в других реализациях семейства UNIX, а также те, которых нет больше нигде. В этом разделе будет дан краткий обзор основных возможностей ядра системы Linux.
Linux — это полностью мультизадачная многопользовательская операционная система, так же как и все версии системы UNIX. Это означает, что сразу несколько пользователей могут одновременно войти в операционную систему и запускать программы на одном и том же компьютере.
Система Linux в основном совместима с несколькими стандартами системы UNIX (в той мере, в которой стандарты системы UNIX вообще существуют) на уровне исходных текстов, в том числе  — со стандартами IEEE POSIX.1, UNIX System V, BSD (Berkely System Distribution) UNIX. При разработке системы Linux совместимость на уровне исходных текстов подразумевалась, и довольно просто будет найти общие для нескольких различных платформ черты. Значительная часть свободного программного обеспечения для системы UNIX может быть получена через Интернет (или как-либо ещё) и без всякой обработки откомпилирована в системе Linux. Кроме того, все исходные тексты системы Linux, включая ядро, драйверы устройств, библиотеки, пользовательские программы и средства разработки, распространяются свободно.
В системе Linux реализованы язык управления заданиями POSIX (используется оболочками типа csh и bash), псевдотерминалы (устройства pty) и поддержка динамически загружаемых драйверов клавиатуры для изменённых либо иностранных (не-английских) алфавитов. Система Linux поддерживает виртуальные консоли (virtual console), с помощью которых можно переключаться между несколькими одновременными сеансами на одном (физически) терминале. Пользователи программы screen обнаружат, что система организации виртуальных консолей в системе Linux им знакома.
Ядро системы позволяет производить постраничную загрузку исполняемых программ. В оперативную память с диска загружаются только те части программы, которые в данный момент требуются. Исполняемые программы пользуются общим буфером записи (copy-on-write pages). Если одновременно в памяти работают несколько экземпляров одной и той же программы, то они пользуются общими кусками физической памяти, уменьшая тем самым суммарный объем используемой памяти.
Для увеличения объёма доступной оперативной памяти Linux использует также временное хранение данных на диске (disk paging). Под эти цели может быть отведено до 1 гигабайта (8 частей по 128 мегабайт) дисковой памяти. На своп, или область подкачки (swap), могут перекачиваться не обязательно процессы целиком; возможно скачивание отдельных страниц памяти. Таким образом система получает возможность запускать объёмные приложения и/или поддерживать больше пользователей, работающих одновременно. Заметим, что временное хранение данных на диске не может заменить «настоящую» оперативную память, работающую намного быстрее диска.
Для пользовательских программ и кэширования ядро системы Linux использует «общий котёл» (unified memory pool) оперативной памяти. В каждый момент используется вся доступная оперативная память, объем которой может, например, уменьшаться, когда запускается крупное приложение.
Для исполняемых файлов используются также динамически вызываемые библиотеки общего пользования (они существуют на диске в единственном экземпляре и могут использоваться несколькими программами). Этот механизм немногим отличается от аналогичного механизма SunOS. Таким образом, объем исполняемых файлов, особенно тех, которые используют много библиотечных процедур, резко сокращается. Возможно также формирование статически связываемых библиотек (statically linked libraries); это нужно для целей отладки или для формирования «полного» исполняемого файла для работы на тех системах, где библиотеки общего пользования не установлены. Подключение библиотечных процедур происходит во время работы программы, так что программист может по желанию подключать либо стандартную библиотечную процедуру, либо собственную процедуру взамен библиотечной.
Для упрощения отладки ядро системы может генерировать полную «распечатку» содержимого памяти и регистров (core dump) в случае аварийного завершения программы. С помощью специальной программы, подключённой к средствам отладки, разработчик программы может проанализировать эту «распечатку» и отыскать причину сбоя в программе.
Распространение Linux
Система Linux распространяется на условиях лицензии особого рода, известной под названием GNU-лицензии (GNU General Public License, или GPL). GNU-лицензия была разработана для проекта GNU организацией Free Software Foundation, и эта лицензия устанавливает несколько условий на распространение и изменение свободного программного обеспечения.
Прежде всего, нужно объяснить, что свободное программное обеспечение, на которое распространяется GNU-лицензия, не является общедоступным (public domain) программным обеспечением. По определению, общедоступные программы принадлежат обществу и не защищаются никакими авторскими правами. Напротив, программы, на которые распространяется GNU-лицензия, защищены авторским копирайтом. У таких программ есть автор в юридическом понимании этого слова, и права авторов этих программ защищаются обычными международными законами, относящимися к авторскому праву. Таким образом, GNU-лицензия делает программное обеспечение свободно распространяемым, но не передаёт его в пользование обществу.
Также GNU-лицензия позволяет получать, модифицировать и распространять собственные модифицированные версии программного обеспечения. Однако на все продукты, разработанные на основе программ, защищённых GNU-лицензией, также должна быть поставлена GNU-лицензия. Другими словами, организация не может взять систему Linux, изменить её и начать продавать, поставив на неё лицензию, которая будет ограничивать распространение. Если некоторое программное обеспечение получено с помощью модификации программного обеспечения системы Linux, на него также должна быть поставлена GNU-лицензия.
GNU-лицензия позволяет распространять и использовать свободное программное обеспечение бесплатно. Но она также позволяет частным лицам и организациям распространять эти программы за плату и даже извлекать прибыль из продажи и распространения. При этом распространитель программного обеспечения, защищённого GNU-лицензией, не может отобрать эти же права у покупателя. Если вы купили это программное обеспечение у некоторого третьего лица, вы можете его как самостоятельно продавать, так и распространять бесплатно.
Сказанное выше может казаться противоречивым. Зачем, казалось бы, продавать программное обеспечение, когда GNU-лицензия позволяет получить его бесплатно? Представим себе однако, что некоторая организация решила собрать большое количество свободного программного обеспечения, записать его на лазерный диск и распространять этот диск. Для того, чтобы покрыть расходы по производству и распространению лазерных дисков, компания будет вынуждена требовать некоторую оплату, и может даже извлечь из этой деятельности прибыль. Подобное не запрещается GNU-лицензией.
Организации, которые продают свободное программное обеспечение, должны следовать некоторым ограничениям, которые накладывает GNU-лицензия. Продавцы не могут ограничивать права пользователей, которые покупают программное обеспечение. Если вы купили диск CD-ROM, который содержит программы, защищённые GNU-лицензией, вы можете копировать программы с этого диска и распространять их бесплатно, или же сами можете их продавать. Продавцы программ должны чётко объяснить покупателям, что программы защищены GNU-лицензией. Продавцы также обязаны бесплатно распространять полный набор исходных текстов распространяемого программного обеспечения. Это позволяет каждому покупателю программного обеспечения, защищённого GNU-лицензией, производить модификации этих программ.
Такой подход, когда организации разрешено распространять и продавать свободное программное обеспечение, даёт положительные результаты. Не у каждого пользователя есть доступ к Интернету и возможность скопировать через него программное обеспечение. Кроме того, большое количество организаций продаёт систему Linux на дискетах, лентах и лазерных дисках по заказам через почту и от этих продаж получает прибыль. Разработчики системы Linux могут никогда не увидеть этих денег; когда на программное обеспечение накладывается GNU-лицензия, это понимают и автор, и распространитель программ. Другими словами, Линус Торвальдс знал, что организации могут захотеть продавать его систему Linux, и что он за это может не получить ни цента, и сознательно шёл на это.
Дело в том, что в мире свободного программного обеспечения важны не деньги. Цель создания и распространения свободных программ всегда будет состоять в том, чтобы дать всем возможность получать и использовать хорошие программы. В следующих разделах этой книги будет показано, как эта концепция применялась при разработке системы Linux.
Ранее Линус Торвальдс (Linus Torvalds) распространял систему Linux на условиях более строгой, чем GPL, лицензии. Эта лицензия позволяла свободно распространять и изменять программное обеспечение, но запрещала при этом любую форму оплаты за передачу программного обеспечения и его использование. В отличие от этого, GNU-лицензия позволяет продавать свободное программное обеспечение и извлекать из этого прибыль, однако не позволяет ограничивать чьи-либо права на распространение этих программ в любой форме.
Построение и философия системы Linux
Пользователи без достаточного опыта работы в системе Linux часто неправильно понимают концепцию системы Linux и ожидают от неё того, что она не может дать. Для того, чтобы эффективно использовать систему, важно понять философию и принцип построения системы Linux. Мы начнём с описания того принципа, по которому система Linux не построена.
В компаниях, разрабатывающих коммерческие программы для системы UNIX, на всем протяжении разработки системы соблюдается строгая методика обеспечения качества. В эту методику входят системы контроля за исходными текстами, системы контроля за изменениями системы, методики ведения документации, и методики, по которым сообщаются и исправляются ошибки. Разработчики не могут, руководствуясь внезапно появившейся у них идеей, добавить новые возможности в систему или изменить её ключевые разделы. Изменения должны быть обоснованы сообщением об ошибке, и сообщение об изменениях должно быть занесено в специальную систему контроля исходного текста, так что при необходимости сделанные изменения могут быть отменены. Каждому разработчику поручаются одна или несколько частей разрабатываемой системы, и только он может изменять эти разделы системы, пока эти разделы находятся у него в разработке, и до тех пор, пока они не будут отмечены как готовые.
В таких организациях имеется специальный организационно оформленный отдел обеспечения качества. Этот отдел производит строгое тестирование каждой новой версии системы и сообщает о всех замеченных ошибках. Выявленные ошибки исправляются разработчиками. Перед выходом очередной версии системы обычно требуется, чтобы определённый процент ошибок был исправлен, и что система как целое удовлетворяет некоторым конкретным критериям. Для этого используются сложные системы статистического анализа.
Вполне понятно, что компании-производителю программного обеспечения требуется оценивать степень готовности очередной версии программы к отправке на тиражирование. Часто желательно, чтобы эта оценка была количественной. Поэтому компания занимается сбором статистической информации о производительности операционных систем. Разработка коммерческой операционной системы семейства UNIX — это большой коммерческий проект, часто большой настолько, что в его рамках нанимаются сотни, если не тысячи, программистов, испытателей программного обеспечения, специалистов по написанию документации и административного персонала. Разумеется, нет двух похожих компаний, выпускающих коммерческие операционные системы семейства UNIX, но все они укладываются в описанную выше схему.
Схема, по которой создавалась операционная система Linux, не имеет ничего общего с моделью, описанной выше: здесь нет организованного упорядоченного развития, системы контроля исходных текстов, структурированной системы фиксации ошибок и статистической системы контроля качества. Linux является операционной системой, созданной хакерами, и возможно навсегда останется такой. Заметим, что словом хакер в данной книге обозначается страстно увлечённый своим делом программист, который испытывает радость от работы с компьютерами и с помощью этих компьютеров делает интересные вещи. Это — первоначальное определение слова хакер; оно отличается от того смысла, который в него стали вкладывать в последнее время: нарушитель компьютерного законодательства или программист, не признающий законов.
Не существует какой-либо организации, которая была бы ответственна за создание и развитие системы Linux. Любой программист с достаточными умениями и навыками имеет возможность участвовать в развитии и исправлении ошибок ядра системы, переносить новое программное обеспечение на другие платформы, писать документацию и помогать неопытным пользователям. Большей частью сообщество создателей системы Linux общается между собой с помощью списков рассылки и телеконференций Usenet. В процессе создания системы возникло несколько соглашений. Если, например, какой-нибудь программист хочет, чтобы его код был включена в "официальное" ядро системы, он отправляет свой код Линусу Торвальдсу. Линус Торвальдс тестирует этот код, и если новый код не противоречит общему дизайну системы и не нарушает работу других частей системы, то он включается в ядро.
При разработке системы использовался открытый функционально-ориентированный подход. В последнее время количество новых функций и существенных изменений, вносимых в систему, уменьшилось, и общим правилом стало, что новая версия ядра выпускается один раз в несколько недель. Разумеется, длительность перерывов между выпусками новых версий — величина не постоянная. Среди факторов, влияющих на выпуск очередной версии — число исправленных ошибок, сообщения от пользователей, испытывающих предварительные версии системы, и, наконец, время, которое имел для сна за эти недели сам Линус Торвальдс.
Не лишним здесь будет сказать, что перед выпуском новой версии не все ошибки удаётся исправить и не все проблемы решить. Новая версия считается стабильной и выпускается сразу, как только создаётся впечатление, что в ней нет критических или исправленных ранее ошибок. Идея, которая движет создателями системы Linux, состоит не в том, чтобы создать совершенную программу, в которой нет ошибок, а скорее в том, чтобы создать свободную реализацию операционной системы семейства UNIX. Система Linux предназначена больше для разработчиков системы, чем для кого-либо ещё.
Если программист написал некоторое приложение или программу, которая реализует какую-либо новую возможность, он обычно распространяет её в так называемой альфа-версии, т. е. в пробной версии. Эта версия предназначается для тех отважных пользователей, которые готовы искать ошибки в первоначальном варианте программы. Поскольку общение в сообществе разработчиков системы Linux в основном происходит через Интернет, программы альфа-версии обычно выставляются на один или несколько FTP-сайтов, посвящённых системе Linux. Кроме того, в одну из телеконференций Usenet, посвящённых системе Linux, посылается сообщение о том, как получить новую программу и как её испытывать. Пользователи, которые переписывают и испытывают альфа-версии новых программ, могут впоследствии направлять по электронной почте результаты испытаний, советы по исправлению ошибок и вопросы автору.
После того, как первоначальные ошибки исправлены, программе присваивается бета-версия. В бета-версии программа обычно считается стабильной, но не полной. Программа в бета-версии работает, но у неё могут быть реализованы не все функции. Программа может также перейти непосредственно в конечное состояние, в котором она будет считаться полной и готовой к использованию.
Следует иметь в виду, что сказанное выше является всего лишь соглашениями, а не правилами. Некоторые программисты настолько уверены в корректности написанных ими программ, что они считают необязательным для себя выпускать альфа- или бета-версии. Подобные решения всегда принимаются программистом, который пишет данную программу.
На первый взгляд может показаться удивительным, что такой неупорядоченной системе добровольных программистов и испытателей программного обеспечения удаётся создать законченную операционную систему семейства UNIX. Однако, как оказывается, здесь мы имеем дело с одним из наиболее эффективных методов создания программного обеспечения с очень сильной мотивацией участников. Все ядро системы Linux написано абсолютно с нуля. При написании кода не использовались никакие источники, защищённые авторскими правами. Перенесение всевозможного свободного программного обеспечения под Linux — огромная задача, требующая колоссальных усилий: создаются и переносятся библиотеки, конструируются файловые системы, пишутся драйверы для многих популярных видов устройств — и все это делается на абсолютно добровольных началах.
Операционная система Linux обычно распространяется в виде дистрибутивов — наборов своеобразно упакованных программ, которые вместе составляют полную систему. Для большинства пользователей будет очень трудно выстроить полную систему с нуля, начиная с ядра, добавляя к нему утилиты и устанавливая все необходимое программное обеспечение вручную. Вместо этого существуют многочисленные дистрибутивы программного обеспечения, которые включают в себя все необходимое для того, чтобы установить и использовать полную систему. Не существует единственного стандартного дистрибутива — есть несколько дистрибутивов, и каждый имеет свои преимущества и недостатки.`;

let x;

switch (x) {
    case 1:
        console.log(/спасибо/i.test("СПАСИБО"));
        break;
    case 2:
        console.log(/^[,.:\-!?а-яА-ЯёЁ]+$/.test("Привет,мир!"));
        // ^ — соответствует началу строки
        // + — соответствует предыдущему выражению, которое повторено 1 или более раз
        // $ — соответствует концу строки
        break;
    case 3:
        console.log(/^[a-zA-Z0-9!#$%&'*+\-=?^_`{|}~]+@[a-z]+\.[a-z]{2,4}$/.test("SandyLittle@okay.com"));
        // {2,4} - {2,4} indicates the minimum and maximum number of characters. This will allow domain names with 2, 3 and 4 characters e.g.; us, tx, org, com, net, wxyz)
        break;
    case 4:
        let exp4 = /П[а-я]*/gi;
        let result4 = text.match(exp4);
        result4.forEach((value, index, array) => console.log(value));
        console.log(`Количество слов, начинающихся на букву П(без учёта регистра) = ${result4.length}`);
        // * — соответствует предыдущему выражению, которое повторено 0 или более раз.
        break;
    case 5:
        let exp5 = /\b[А-ЯЁA-Z]{2,}\b/g;
        result5 = text.match(exp5);
        result5.forEach(v => console.log(v));
        break;
    case 6:
        let sentences = text.split('.');
        let newArr = [];

        for (let i = 0; i < sentences.length; i++) {
            if (sentences[i].search('GNU') != -1)
                newArr.push(sentences[i]);
        }

        let result = newArr.join('.');
        console.log(result);
        break;
    case 7:
        let windows = text.replace(/Linux/g, 'Windows');
        let msDos = windows.replace(/UNIX/g, 'MS-DOS');
        let bill = msDos.replace(/Линус[а-я]*/gi, 'Билл');
        let gates = bill.replace(/Торвальдс[а-я]*/gi, 'Гейтс');
        let longWords = gates.replace(/[a-zA-Zа-яА-ЯёЁ]{15,}/g, '_______');
        console.log(longWords);
        break;
    default:
        console.log("Enter the value of the existing task number in the variable 'x'!");
}



// // Найдет все слова, начинающиеся на "h". Нам подойдут и заглавные и строчные, так что используем модификатор i
// // \b для определения границы слов.
// var text1 = 'Hello people of 1974. I come from the future. In 2014 we have laser guns, hover boards and live on the moon!';
// var hWords = /\bh\w+/ig;

// console.log(text1.match(hWords) );
// -------------------------------------------------------------------------------------------------------
// Наилучшая техника для выбора уникальных строк – использование вспомогательного объекта obj. Ведь название свойства в объекте, с одной стороны – строка, а с другой – всегда уникально. Повторная запись в свойство с тем же именем перезапишет его.
// Например, если "харе" попало в объект один раз (obj["харе"] = true), то второе такое же присваивание ничего не изменит.
// Решение ниже создаёт объект obj = {} и записывает в него все строки как имена свойств. А затем собирает свойства из объекта в массив через Object.keys(). Дубликатов уже не будет.
// function unique(arr) {
//     let obj = {};

//     for (let i = 0; i < arr.length; i++) {
//         let str = arr[i];
//         obj[str] = true; // запомнить строку в виде свойства объекта
//     }

//     return Object.keys(obj); // или собрать ключи перебором для IE8-
// }
// console.log(unique(result));
// -------------------------------------------------------------------------------------------------------
// let exp = /\bGNU\b/g;;
// let result = text.match(exp);
// result.forEach(v => console.log(v));